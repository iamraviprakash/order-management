{"version":3,"sources":["redux/ActionCreators.js","redux/ActionTypes.js","components/Order.js","components/OrdersList.js","components/Search.js","components/RightSurface.js","components/Main.js","shared/baseUrl.js","redux/orders.js","App.js","redux/store.js","serviceWorker.js","index.js"],"names":["nextOrders","dispatch","getState","currentIndex","ordersList","queriedOrdersList","queried","displayOrdersList","maxQueriedOrdersListLength","length","slice","addDisplayOrders","convertDateStringToShortDateForm","dateString","dateParts","split","Date","addOrders","type","payload","addQueriedOrders","text","query","ordersListFailed","errMess","Order","props","Card","CardContent","Grid","container","Box","display","m","mb","Typography","align","variant","orderId","customerId","deliveryPincode","orderDate","xs","item","p","className","List","items","map","index","itemArray","ListItem","key","ListItemText","ListItemSecondaryAction","Badge","badgeContent","color","Button","size","onClick","handleDialogOpen","OrdersList","useState","open","setOpen","dialogData","setDialogData","data","isLoading","justifyContent","CircularProgress","flexWrap","alignContent","order","Dialog","DialogTitle","DialogContent","DialogActions","Search","TextField","id","InputProps","startAdornment","InputAdornment","position","placeholder","onChange","event","searchOrdersListByText","target","value","RightSurface","spacing","flexDirection","alignItems","fontSize","pl","flexGrow","Fab","aria-label","sortQueriedOrders","IconButton","prevOrders","Main","this","getOrdersList","Container","Component","withRouter","connect","state","fetch","then","response","ok","Error","status","statusText","error","message","json","catch","sort","order1","order2","parseInt","getTime","all","filter","toString","indexOf","action","store","createStore","combineReducers","applyMiddleware","thunk","logger","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bd650f76.chunk.js","sourcesContent":["import * as ActionTypes from './ActionTypes';\nimport { baseUrl } from '../shared/baseUrl';\n\n// All Orders\n\n// Redux Thunk\nexport const getOrdersList = () => (dispatch) => {\n\n    // Send status that list is loading\n\n    return fetch(baseUrl)\n        .then(response => {\n            if (response.ok){\n                return response;\n            }\n            else{\n                // Error is handled in case of when server responds but with errors\n                throw new Error('Error ' + response.status + ': ' + response.statusText);\n            }\n        }, error => {\n            var errMess = new Error(error.message);\n            throw errMess;\n        })\n        .then(response => response.json())\n        .then(ordersList => {\n            // var index = 0\n            // for(var order of ordersList){\n            //     order[\"id\"] = index\n            //     index++\n            // }\n            dispatch(addOrders(ordersList[\"orders\"]))\n            dispatch(nextOrders())\n        })\n        .catch(error => dispatch(ordersListFailed(error.message)))\n}\n\n\nexport const searchOrdersListByText = (text) => (dispatch, getState) => {\n\n    // Send status that list is loading\n    \n    var ordersList = getState().ordersList.all;\n    var displayOrdersList = []\n\n    var queriedOrdersList = ordersList.filter(order => {\n        //console.log(order)\n        if (order[\"deliveryPincode\"].toString().indexOf(text.toString()) > -1 || order[\"orderDate\"].toString().indexOf(text.toString()) > -1){\n            //console.log('true')\n            return true;\n        }\n        //console.log('false')\n        return false;\n    })\n\n    dispatch(addQueriedOrders(queriedOrdersList, text));\n    displayOrdersList = queriedOrdersList.slice(0, 10)\n    dispatch(addDisplayOrders(displayOrdersList, 10))\n}\n\n\nexport const sortQueriedOrders = (sortOrder) => (dispatch, getState) => {\n\n    //console.log(\"Sorting...\")\n\n    var queriedOrdersList = getState().ordersList.queried;\n    var query = getState().ordersList.query;\n    // var currentIndex = getState().ordersList.currentIndex;\n    var displayOrdersList = []\n    \n    // Ascending order\n    //if(sortOrder)\n        queriedOrdersList.sort((order1, order2) => { return parseInt(convertDateStringToShortDateForm(order1.orderDate).getTime()) - parseInt(convertDateStringToShortDateForm(order2.orderDate).getTime()) })\n    //else\n        //queriedOrdersList.sort((order1, order2) => { return parseInt(convertDateStringToShortDateForm(order2.orderDate).getTime()) - parseInt(convertDateStringToShortDateForm(order1.orderDate).getTime()) })\n\n    dispatch(addQueriedOrders(queriedOrdersList, query))\n    displayOrdersList = queriedOrdersList.slice(0, 10)\n    dispatch(addDisplayOrders(displayOrdersList, 10))\n}\n\n\nexport const nextOrders = () => (dispatch, getState) => {\n\n    var currentIndex = getState().ordersList.currentIndex;\n    var queriedOrdersList = getState().ordersList.queried;\n    var displayOrdersList = []\n\n    var maxQueriedOrdersListLength = queriedOrdersList.length\n\n    if((currentIndex+10) > maxQueriedOrdersListLength && currentIndex < maxQueriedOrdersListLength){\n        displayOrdersList = queriedOrdersList.slice(currentIndex, maxQueriedOrdersListLength)\n        dispatch(addDisplayOrders(displayOrdersList, maxQueriedOrdersListLength))\n    } else if( (currentIndex+10) < maxQueriedOrdersListLength) {\n        displayOrdersList = queriedOrdersList.slice(currentIndex, currentIndex+10)\n        dispatch(addDisplayOrders(displayOrdersList, currentIndex+10))\n    }\n}\n\nexport const prevOrders = () => (dispatch, getState) => {\n    var currentIndex = getState().ordersList.currentIndex;\n    var queriedOrdersList = getState().ordersList.queried;\n    var displayOrdersList = []\n\n    var minQueriedOrdersListLength = 0\n\n    if((currentIndex-10) < minQueriedOrdersListLength && currentIndex > minQueriedOrdersListLength){\n        displayOrdersList = queriedOrdersList.slice(minQueriedOrdersListLength, currentIndex)\n        dispatch(addDisplayOrders(displayOrdersList, minQueriedOrdersListLength))\n    } else if( (currentIndex-10) > minQueriedOrdersListLength) {\n        displayOrdersList = queriedOrdersList.slice(currentIndex-10, currentIndex)\n        dispatch(addDisplayOrders(displayOrdersList, currentIndex-10))\n    }\n}\n\n\nconst convertDateStringToShortDateForm = (dateString) => {\n    // Convert dd/mm/yyyy to mm/dd/yyyy\n    var dateParts = dateString.split(\"/\");\n\n    // month is 0-based, that's why we need dataParts[1] - 1\n    var dateObject = new Date(+dateParts[2], dateParts[1] - 1, +dateParts[0]); \n\n    return dateObject\n}\n\n\n// Action creators\n\nexport const ordersListLoading = () => ({\n    type: ActionTypes.ORDERS_LIST_LOADING\n});\n\nexport const addOrders = (ordersList) => ({\n    type: ActionTypes.ADD_ORDERS,\n    payload: ordersList\n});\n\nexport const addQueriedOrders = (ordersList, text) => ({\n    type: ActionTypes.ADD_QUERIED_ORDERS,\n    payload: {\n        ordersList: ordersList,\n        query: text\n    }\n});\n\nexport const addDisplayOrders = (ordersList, currentIndex) => ({\n    type: ActionTypes.ADD_DISPLAY_ORDERS,\n    payload: {\n        ordersList: ordersList,\n        currentIndex: currentIndex\n    }\n});\n\nexport const ordersListFailed = (errMess) => ({\n    type: ActionTypes.ORDERS_LIST_FAILED,\n    payload: errMess\n});\n\n","export const ORDERS_LIST_LOADING = 'ORDERS_LIST_LOADING'; \nexport const ADD_ORDERS = 'ADD_ORDERS'; \nexport const ADD_DISPLAY_ORDERS = 'ADD_DISPLAY_ORDERS'; \nexport const NEXT_DISPLAY_ORDERS = 'NEXT_DISPLAY_ORDERS'; \nexport const PREV_DISPLAY_ORDERS = 'PREV_DISPLAY_ORDERS'; \nexport const ADD_QUERIED_ORDERS = 'ADD_QUERIED_ORDERS';\nexport const ORDERS_LIST_FAILED = 'ORDERS_LIST_FAILED'; ","import React from 'react';\nimport '../shared/style.css';\nimport { Grid, Card, CardContent, DialogTitle, Box, Typography, List, ListItem, ListItemText, ListItemSecondaryAction, Badge, Button, Dialog, DialogContent, DialogActions } from '@material-ui/core';\n\n\nconst Order = (props) => {\n    return(\n        <>\n            <Card>\n                <CardContent>\n                    <Grid container>\n                        <Box display=\"flex\">\n                            <Box m={2} mb={0}>\n                                <Typography align=\"left\" variant=\"overline\" display=\"block\">Order Id</Typography>\n                                <Typography align=\"left\" variant=\"body1\" display=\"block\">{props.orderId}</Typography>\n                            </Box>\n                            <Box m={2} mb={0}>\n                                <Typography align=\"left\" variant=\"overline\" display=\"block\">Customer Id</Typography>\n                                <Typography align=\"left\" variant=\"body1\" display=\"block\">{props.customerId}</Typography>\n                            </Box>\n                        </Box>\n                    </Grid>\n                    <Grid container>\n                        <Box display=\"flex\">\n                            <Box m={2} mb={0}> \n                                <Typography align=\"left\" variant=\"overline\" display=\"block\">Pincode</Typography>\n                                <Typography align=\"left\" variant=\"body1\" display=\"block\">{props.deliveryPincode}</Typography>\n                            </Box>\n                            <Box m={2} mb={0}>\n                                <Typography align=\"left\" variant=\"overline\" display=\"block\">Date</Typography>\n                                <Typography align=\"left\" variant=\"body1\" display=\"block\">{props.orderDate}</Typography>\n                            </Box>\n                        </Box>\n                    </Grid>\n                    <Grid container>\n                        <Grid xs={12} item>\n                            <Box p={1} m={1} className=\"ListArea\">\n                                <List>\n                                    { \n                                        props.items.split(\";\").slice(0, 3).map((item, index) => {\n                                            var itemArray = item.split(\":\")\n                                        return (\n                                            <ListItem key={index}>\n                                                <ListItemText>\n                                                    <Typography align=\"left\" variant=\"body1\">{itemArray[0]}</Typography>\n                                                </ListItemText>\n                                                <ListItemSecondaryAction>\n                                                    <Badge badgeContent={itemArray[1]} color=\"primary\"></Badge>\n                                                </ListItemSecondaryAction>\n                                            </ListItem>\n                                        )\n                                        })\n                                    }\n                                    { props.items.split(\";\").length > 3 ? \n                                            <ListItem>\n                                                <ListItemText className=\"text-center\">\n                                                    <Button size=\"small\" onClick={() => props.handleDialogOpen(props.items)}>View more</Button>\n                                                </ListItemText>\n                                            </ListItem>: \"\"\n                                    }\n                                </List>\n                            </Box>\n                        </Grid>\n                    </Grid>\n                </CardContent>\n            </Card>\n        </>\n    );\n}\n\nexport default Order;","import React, { useState } from 'react';\nimport '../shared/style.css';\nimport { Button, Box, CircularProgress, Dialog, DialogTitle, DialogContent, DialogActions, List, ListItem, ListItemText, ListItemSecondaryAction, Badge, Typography} from '@material-ui/core';\nimport Order from './Order';\n\nconst OrdersList = (props) => {\n\n        const [open, setOpen] = useState(false);\n        const [dialogData, setDialogData] = useState(\"\");\n\n        const handleDialogOpen = (data) => {\n            setOpen(true)\n            setDialogData(data)\n        }\n\n        const handleDialogClose = () => {\n            setOpen(false)\n        }\n   \n        //console.log(this.props)\n        const {ordersList: {isLoading, errMess, display}} = props;\n\n        if(isLoading)\n            return(\n                <Box\n                    display=\"flex\"\n                    justifyContent=\"center\"\n                >\n                    <Box><CircularProgress color=\"inherit\"/></Box>\n                </Box>\n            )\n        else if(errMess)\n                return(errMess)\n        else\n            return(\n                <>\n                <Box \n                    display=\"flex\"\n                    flexWrap=\"wrap\"\n                    alignContent=\"flex-start\"\n                    justifyContent=\"center\"\n                    p={2}\n                    \n                >\n                    { display.map((order) => {\n\n                            return (\n                                <Box m={2} key={order.orderId}>\n                                    <Order \n                                        orderId={order.orderId}\n                                        customerId={order.customerId}\n                                        deliveryPincode={order.deliveryPincode}\n                                        orderDate={order.orderDate}\n                                        items={order.items}\n                                        handleDialogOpen={handleDialogOpen}\n                                    />\n                                </Box>\n                            )\n                        })\n                    }\n                    \n                </Box>\n                <Dialog\n                    open={open}\n                >\n                    <DialogTitle>\n                        Full List\n                    </DialogTitle>\n                    <DialogContent>\n                        <Box p={4} m={4} className=\"ListArea\">\n                            <List>\n                                {\n                                    dialogData.split(\";\").map((item, index) => {\n                                        var itemArray = item.split(\":\")\n                                    return (\n                                        <ListItem key={index}>\n                                            <ListItemText>\n                                                <Typography align=\"left\" variant=\"body1\">{itemArray[0]}</Typography>\n                                            </ListItemText>\n                                            <ListItemSecondaryAction>\n                                                <Badge badgeContent={itemArray[1]} color=\"primary\"></Badge>\n                                            </ListItemSecondaryAction>\n                                        </ListItem>\n                                    )\n                                    })\n                                }\n                            </List>\n                        </Box>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button color=\"primary\" onClick={handleDialogClose}>\n                            Close\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n                </>\n            );\n    }\n\nexport default OrdersList;","import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport '../shared/style.css';\nimport { Grid, InputAdornment } from '@material-ui/core';\nimport SearchIcon from '@material-ui/icons/Search';\n\n\nconst Search = (props) => {\n\n    function handleChange(event) {\n        props.searchOrdersListByText(event.target.value);\n    }\n      \n    return(\n        <Grid container>\n            <Grid item xs={12} className=\"text-center\">\n                <TextField\n                    id=\"input-with-icon-textfield\"\n                    InputProps={{\n                      startAdornment: (\n                        <InputAdornment position=\"start\">\n                          <SearchIcon />\n                        </InputAdornment>\n                      ),\n                      placeholder: (\n                        \"Search by Pincode or Date\"\n                      )\n                    }}\n                    className=\"SearchField\"\n                    onChange={handleChange}\n                />\n            </Grid>\n        </Grid>\n    );\n}\n\nexport default Search;","import React from 'react';\nimport OrdersList from './OrdersList';\nimport Search from './Search';\nimport '../shared/style.css';\nimport { Grid , Typography, Box, Fab, IconButton, Dialog, DialogActions, DialogContent, Button, DialogTitle} from '@material-ui/core';\nimport DashboardIcon from '@material-ui/icons/Dashboard';\nimport SortIcon from '@material-ui/icons/Sort';\nimport KeyboardArrowLeftIcon from '@material-ui/icons/KeyboardArrowLeft';\nimport KeyboardArrowRightIcon from '@material-ui/icons/KeyboardArrowRight';\n\nconst RightSurface = (props) => {\n      \n    return(\n            <>\n                <Grid container spacing={4}>\n                    <Grid item xs={12}>\n                        <Box display=\"flex\" flexDirection=\"row\" p={2} >\n                            <Box p={1} display=\"flex\" alignItems=\"center\" >\n                                <DashboardIcon fontSize=\"large\"/>\n                            </Box>\n                            <Box p={1}>\n                                <Typography variant=\"h4\">Dashboard</Typography>\n                            </Box>\n                        </Box>      \n                    </Grid>\n                    <Grid item xs={12} className=\"text-center\">\n                        <Search searchOrdersListByText={(text) => props.searchOrdersListByText(text)}/>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Box display=\"flex\" flexWrap=\"wrap\">\n                            <Box display=\"flex\" flexDirection=\"row\" p={2}>\n                                <Box p={0.5} pl={1} display=\"flex\" alignItems=\"center\" >\n                                    <Typography variant=\"subtitle1\" display=\"inline\">Showing</Typography>\n                                </Box>\n                                <Box p={0.5} display=\"flex\" alignItems=\"center\" >\n                                    <Typography variant=\"h6\" display=\"inline\">{props.ordersList.queried.length}</Typography>\n                                </Box>\n                                <Box p={0.5} display=\"flex\" alignItems=\"center\" >\n                                    <Typography variant=\"subtitle1\" display=\"inline\" >results for</Typography>\n                                </Box>\n                                <Box p={0.5} display=\"flex\" alignItems=\"center\" > \n                                    <Typography variant=\"h6\" display=\"inline\">{props.ordersList.query.length === 0 ? props.ordersList.queried.length : props.ordersList.query}</Typography>\n                                </Box>\n                            </Box>  \n                            <Box flexGrow={1}></Box>\n                            <Box>\n                                <Fab aria-label=\"sort\" onClick={() => {props.sortQueriedOrders(0)}}>\n                                    <SortIcon />\n                                </Fab>\n                            </Box>  \n                        </Box>        \n                    </Grid>\n                    <Grid item xs={12} className=\"text-center\">\n                        <OrdersList \n                            ordersList={props.ordersList} \n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Box\n                                display=\"flex\"\n                                justifyContent=\"center\"\n                                p={5}\n                        >\n                            <Box p={2}>\n                                <IconButton color=\"inherit\" aria-label=\"prev\" onClick={() => props.prevOrders()}>\n                                    <KeyboardArrowLeftIcon fontSize=\"large\"/>\n                                </IconButton>\n                            </Box>\n                            <Box p={2} display=\"flex\" alignItems=\"center\">\n                                <Typography variant=\"subtitle1\" display=\"inline\">{(props.ordersList.currentIndex-9) > 0 ? props.ordersList.currentIndex-9 : 0} - {props.ordersList.currentIndex} of {props.ordersList.queried.length}</Typography>\n                            </Box>\n                            <Box p={2}>\n                                <IconButton color=\"inherit\" aria-label=\"next\" onClick={() => props.nextOrders()}>\n                                    <KeyboardArrowRightIcon fontSize=\"large\"/>\n                                </IconButton>\n                            </Box>\n                        </Box>\n                    </Grid>\n            </Grid>\n            \n        </>\n    );\n}\n\nexport default RightSurface;","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\n// import Grid from '@material-ui/core/Grid';\nimport { getOrdersList, searchOrdersListByText, sortQueriedOrders, nextOrders, prevOrders } from '../redux/ActionCreators';\nimport '../shared/style.css';\n// import Sidebar from './Sidebar';\nimport RightSurface from './RightSurface';\nimport { Container } from '@material-ui/core';\n\n\nconst mapStateToProps = state => {\n    return {\n        \"ordersList\": {...state[\"ordersList\"]}, \n    };\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n    getOrdersList: () => {dispatch(getOrdersList())},\n    sortQueriedOrders: (order) => {dispatch(sortQueriedOrders(order))},\n    searchOrdersListByText: (text) => {dispatch(searchOrdersListByText(text))},\n    nextOrders: () => {dispatch(nextOrders())},\n    prevOrders: () => {dispatch(prevOrders())},\n});\n\n\nclass Main extends Component{\n\n    componentDidMount() {\n        this.props.getOrdersList();\n    }\n    \n    render(){\n        return(\n            <Container className=\"h-100\">\n                {/* <Grid xs={1} >\n                    <Sidebar sortQueriedOrders={(order) => this.props.sortQueriedOrders(order)}/>\n                </Grid> */}\n                <RightSurface \n                            searchOrdersListByText={(text) => this.props.searchOrdersListByText(text)}\n                            ordersList={this.props.ordersList} \n                            sortQueriedOrders={(order) => this.props.sortQueriedOrders(order)}\n                            prevOrders={() => this.props.prevOrders()}\n                            nextOrders={() => this.props.nextOrders()}\n                        />    \n            </Container>\n        );\n        \n    }\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Main));","export const baseUrl = \"https://iamraviprakash.github.io/order-management/api/data.json\";","import * as ActionTypes from './ActionTypes';\n\nexport const OrdersList = (state={\n    isLoading: true,\n    errMess: null,\n    query: \"\",\n    currentIndex: 0,\n    all: [],\n    queried: [],\n    display: []\n}, action) => {\n    switch(action.type){\n        case ActionTypes.ORDERS_LIST_LOADING:\n            return {...state, isLoading: true, errMess: null, all: [], queried: [], display: []}\n        case ActionTypes.ADD_ORDERS:\n            return {...state, isLoading: false, errMess: null, all: action.payload, queried: action.payload}\n        case ActionTypes.ADD_QUERIED_ORDERS:\n                return {...state, queried: action.payload.ordersList, query: action.payload.query}\n        case ActionTypes.ADD_DISPLAY_ORDERS:\n            return {...state, currentIndex: action.payload.currentIndex, display: action.payload.ordersList}\n        case ActionTypes.ORDERS_LIST_FAILED:\n            return {...state, isLoading: false, errMess: action.payload, all: [], queried: []}        \n        default: \n            return state;\n    }\n}","import React from 'react';\nimport Main from './components/Main';\nimport { Provider } from 'react-redux';\nimport { Store } from './redux/store'\nimport { BrowserRouter } from 'react-router-dom';\nimport './App.css';\n\nconst store = Store();\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <BrowserRouter>\n        <div>\n          <Main />\n        </div>\n      </BrowserRouter>\n    </Provider>\n  );\n}\n\n\nexport default App;\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\n// import { createForms } from 'react-redux-form';\nimport thunk from 'redux-thunk';\nimport logger from 'redux-logger';\nimport { OrdersList } from './orders';\n\n\n\nexport const Store = () =>{\n    const store =  createStore(\n        combineReducers({\n            ordersList: OrdersList,\n            // ...createForms({\n                \n            // })\n        }),\n        applyMiddleware(thunk, logger)\n    );\n\n    return store;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}